---
# tasks file for cepdadm.prepare

- name: Change hostname to match Ansible inventory
  hostname:
    name: "{{ inventory_hostname }}"

- name: Install required packages
  package:
    name:
      - python39
      - lvm2
      - tar
      - chrony
    state: present
  when:
    - CEPH_INSTALL_MODE == "online"

- name: Temporarily disables selinux for command
  shell: "setenforce 0"
  failed_when: false

- name: Close Linux SELinux service
  lineinfile:
    dest: /etc/selinux/config
    regexp: "^SELINUX="
    line: "SELINUX=disabled"

- name: Config chrony server
  template:
    src: redhat_chrony_server.conf.j2
    dest: /etc/chrony.conf
  delegate_to: "{{ groups.chrony[0] }}"

- name: Config chrony client
  template:
    src: redhat_chrony_client.conf.j2
    dest: /etc/chrony.conf
  when: 'inventory_hostname != groups.chrony[0]'

- name: Start and enable chrony service
  systemd:
    name: chronyd
    state: restarted
    enabled: yes

- name: Wait for chronyd service to start
  shell: "systemctl is-active chronyd.service"
  register: svc_status
  until: '"active" in svc_status.stdout'
  retries: 3
  delay: 10

- name: Add ceph static DNS record
  lineinfile:
    path: /etc/hosts
    line: "{{ hostvars[item]['ansible_default_ipv4']['address'] }} {{ item }}"
    create: yes
  loop: "{{ groups['ceph_cluster'] }}"

- name: Download cephadm
  copy:
    src: "redhat{{ '8' if ansible_facts['distribution_version'] is version('8.0', operator='ge', strict=True) else '7' }}_{{ CEPH_RELEASE }}_cephadm"
    dest: /usr/bin/cephadm
    mode: 'u+x'
    remote_src: false
  when:
    - ansible_facts['distribution_version'] is version('7.0', operator='lt', strict=True) or ansible_facts['distribution_version'] is version('8.0', operator='ge', strict=True)

- name: Download cephadm
  copy:
    src: redhat7_{{ CEPH_RELEASE }}_cephadm"
    dest: /usr/bin/cephadm
    mode: 'u+x'
    remote_src: false
  when:
    - ansible_facts['distribution_version'] is version('8.0', operator='lt', strict=True)

- name: Install Docker service
  copy:
    src: docker-20.10.10.tgz
    dest: /opt/docker-20.10.10.tgz
    remote_src: false

- name: Init environment
  block:
    - name: Extract and install Docker
      unarchive:
        src: /opt/docker-20.10.10.tgz
        dest: /opt/
        remote_src: yes

    - name: Move Docker binaries
      shell: mv /opt/docker/* /usr/bin/ && touch /tmp/success_init_docker.txt
      args:
        warn: no
        creates: /tmp/success_config_fsdisk.txt

    - name: Optimize the block IO schedule
      template:
        src: docker.service.j2
        dest: /etc/systemd/system/docker.service
        owner: root
        group: root
        mode: '0755'
        trim_blocks: true
        lstrip_blocks: true

    - name: Create Docker daemon configuration
      copy:
        dest: /etc/docker/daemon.json
        content: |
          {
            "features": {
              "buildkit": true
            }
          }

    - name: Reload systemd and start Docker
      systemd:
        name: docker
        state: started
        enabled: yes
  when:
    - deploy_role != 'main'

