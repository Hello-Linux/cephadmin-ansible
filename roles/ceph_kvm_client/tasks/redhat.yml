---
# tasks file for cepdadm.prepare
- name: Change hostname to match Ansible inventory
  hostname:
    name: "{{ inventory_hostname }}"

- name: Install required packages
  package:
    name:
      - python39
      - lvm2
      - tar
      - chrony
    state: present
  when:
    - CEPH_INSTALL_MODE == "online"

- name: Temporarily disables selinux for command
  shell: "setenforce 0"
  failed_when: false

- name: Close Linux SELinux service
  lineinfile:
    dest: /etc/selinux/config
    regexp: "^SELINUX="
    line: "SELINUX=disabled"

- name: Stop firewalld service
  service:
    name: firewalld
    state: stopped

- name: Config chrony client
  template:
    src: redhat_chrony_client.conf.j2
    dest: /etc/chrony.conf
  when: 'inventory_hostname != groups.chrony[0]'

- name: Start and enable chrony service
  systemd:
    name: chronyd
    state: restarted
    enabled: yes

- name: Wait for chronyd service to start
  shell: "systemctl is-active chronyd.service"
  register: svc_status
  until: '"active" in svc_status.stdout'
  retries: 3
  delay: 10

- name: Add ceph static DNS record
  lineinfile:
    path: /etc/hosts
    line: "{{ hostvars[item]['ansible_default_ipv4']['address'] }} {{ item }}"
    create: yes
  loop: "{{ groups['ceph_cluster'] }}"

- name: Download cephadm
  copy:
    src: "redhat{{ '8' if ansible_facts['distribution_version'] is version('8.0', operator='ge', strict=True) else '7' }}_{{ CEPH_RELEASE }}_cephadm"
    dest: /usr/bin/cephadm
    mode: 'u+x'
    remote_src: false
  when:
    - ansible_facts['distribution_version'] is version('7.0', operator='lt', strict=True) or ansible_facts['distribution_version'] is version('8.0', operator='ge', strict=True)

- name: Init ceph client environment
  block:
    - name: add ceph-common repo
      shell: cephadm add-repo --release {{ CEPH_RELEASE }}
      args:
        warn: no

    - name: install ceph-common package
      shell: cephadm install ceph-common
      args:
        warn: no

    - name: Ensure local tmp directory exists
      file:
        path: "/etc/ceph"
        state: directory
        mode: '0755'
      delegate_to: localhost

    - name: Fetch ceph authentication file to ansible control
      fetch:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        flat: yes
      loop:
        - { src: '/etc/ceph/ceph.conf', dest: '/etc/ceph/ceph.conf', mode: '0644' }
        - { src: '/etc/ceph/ceph.client.{{ RBD_KVM_USER_NAME }}.keyring', dest: '/etc/ceph/ceph.client.{{ RBD_KVM_USER_NAME }}.keyring', mode: '0600' }
      delegate_to: "{{ groups['ceph_cluster'][0] }}"

    - name: Ensure /etc/ceph directory exists
      file:
        path: /etc/ceph
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Synchronize the authentication file to the ceph client
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: root
        group: root
        mode: "{{ item.mode }}"
      loop:
        - { src: '/etc/ceph/ceph.conf', dest: '/etc/ceph/ceph.conf', mode: '0644' }
        - { src: '/etc/ceph/ceph.client.{{ RBD_KVM_USER_NAME }}.keyring', dest: '/etc/ceph/ceph.client.{{ RBD_KVM_USER_NAME }}.keyring', mode: '0600' }

    - name: generate the kvm secret xml file for ceph rbd
      template:
        src: ceph_secret.xml.j2
        dest: /etc/ceph/ceph_secret.xml

    - name: create the kvm secret for ceph rbd
      shell: virsh secret-define --file /etc/ceph/ceph_secret.xml && touch /tmp/success_create_kvm_secret.txt
      args:
        warn: no
        creates: /tmp/success_create_kvm_secret.txt

    - name: get the kvm secret uuid value
      shell: virsh secret-list | grep "client.{{ RBD_KVM_USER_NAME }}" | awk '{print $1}'
      args:
        warn: no
      register: kvm_secret_uuid

    - name: Get the client.{{ RBD_KVM_USER_NAME }} key and save the key string to a file
      shell: cat /etc/ceph/ceph.client.{{ RBD_KVM_USER_NAME }}.keyring | awk 'NR==2 {print $3}'
      args:
        warn: no
      register: ceph_user_key

    - name: Set the UUID of the secret about kvm 
      shell: virsh secret-set-value --secret {{ kvm_secret_uuid.stdout }} --base64 "{{ ceph_user_key.stdout }}" && rm /tmp/client.{{ RBD_KVM_USER_NAME }}.key /etc/ceph/ceph_secret.xml
      args:
        warn: no

    - name: generate kvm storage pool about rbd
      template:
        lstrip_blocks: true
        src: libvirt-rbd-pool.xml.j2 
        dest: /etc/ceph/libvirt-rbd-pool.xml

    - name: start the kvm storage pool service with rbd 
      shell: virsh pool-define libvirt-rbd-pool.xml && virsh pool-autostart {{ RBD_KVM_POOL_NAME }} && virsh pool-start {{ RBD_KVM_POOL_NAME }}
      args:
        warn: no
        chdir: /etc/ceph/
